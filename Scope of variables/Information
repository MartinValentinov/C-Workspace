This task implements a simple console process management software for an operating system. For the purpose
a module called “processes” is created and consists of two files: processes.h and processes.c.
In the processes module, a structure "Process" is created, it holds the information about a given process. 
The information consists of two fields - a unique ID (process number) and a process name. The name can be up to 30 characters.
In the processes module, a global variable "processes" is created, which keeps track of all the processes that are launched in the operating system. In the operating system, a maximum of 5 processes can be launched. (The type of this variable must be an array of “Process” structures).
In the processes module, a global variable "processescount" has been created, which keeps track of how many processes have been launched so far.
A function nextprocessid has been created that returns a unique process number (id). The process number is a positive integer. The function returns 0 if the range of unique numbers is exhausted. The function should only be visible in the processes module because we don't want someone to accidentally call it outside of the module and take up the processes number.
A "createnewprocess" function has been created in the processes module, which creates a new process and writes it to the global variable. On creation, the nextprocessid function is called to generate a unique process number, and the process name must be passed as an argument to the “createnewprocess” function.
The function returns the unique process number if a process can be successfully created and 0 if there is no room to create a new process. The function increments the number of running processes (“processcount”) upon successful process creation.
In the processes module, a function "stopprocess" has been created, which stops a process by a unique number (the function must accept the unique number as an argument) and deletes the corresponding entry from the global variable "processes" and decrements the variable "processcount".
The function rearranges the data in processes so that empty spaces in the array always remain after the end of the last record (that is, there are no holes between array elements). If an invalid process number is entered, the program does nothing.
A source file called “taskmanager.c” has been created that provides a program with 4 options: Create a process, List all processes, Stop a process, and exit the program:
Create Process - When this option is selected, a process name must be entered, at which point the program calls the “createnewprocess” function to create a new process and store it in the “processes” global variable. If an attempt is made to create a process that exceeds the capacity of 5 running processes, an error message is displayed that the maximum number of running processes has been reached and to create a new process one of the running processes must be stopped.
Display a list of all processes - When this option is selected, the contents of the global variable “processes” are printed. Each process is printed on a new line with its unique number and name.
Stop Process - When this option is selected, the user is prompted to enter the number of the process they want to stop. The “stopprocess” function is called, which stops the process.
Exit the program - Selecting this option terminates the "taskmanager" program.